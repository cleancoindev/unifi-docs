{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"unifi Table of Contents Table of Contents Decentralized Finance on top of Uniswap, doing fantastic things securely Website: https://unifihub.com Unified Stable Dollar Example: Example: Rebalancing DFO Debit DFO Credit UniFi has a number of measures in place to ensure uSD's security. Resilience, Decentralization and Independence Allowed Stable Coins APIs and Documentation Responsible DeFi Limits Craft and Initial Liquidity Offerings (ILOs) How Does It Work? Programmable Liquidity Rules Let's play out that aforementioned example. Initial Liquidity Offering (ILO) Securing Initial Liquidity for AMMs With Fixed Inflation/Liquidity Staking Disarming Sniper Bots Securing Long Term Locked Investors How ILOs work: Example UniFi DFO Tax Releases The Bazar Listing Index Funds Programmable Equities Non-Fungible Tokens (NFTs) Swappable ERC 1155 Release UniFi Token Distribution UniFi Fair Inflation UniFi Liquidity Staking UniFi Earning System Decentralized Finance on top of Uniswap, doing fantastic things securely UniFi is a new Decentralized Flexible Organization (DFO) that researches and develops a responsible Decentralized Finance layer on top of Uniswap. A DFO protocol powered DeFi set of tools built on top of Uniswap Website: https://unifihub.com Unified Stable Dollar uSD is a stablecoin based on Uniswap Liquidity Pools Minted by the magic rainbow of Uniswap stablecoin pools, and backed by the power of the Unicorn, uSD is the most secure and resilient stablecoin on Ethereum\u200a-\u200aever. The only way it could be destabilized is if the entire stablecoin industry crashed. Independent from any off-chain issuer, it is fortified against every risk inherent to all other stablecoins, and free of the anxiety that pervades the industry. The protocol achieves this unprecedented feat by collateralizing other stablecoins. If any of them lose value or fail, it can simply rebalance itself to leverage the security of the others. And to account for excess due to fees earned by their pools, it can rebalance itself in another way. The only way uSD can be destabilized is if the entire stablecoin industry collapses. uSD is backed by a selection of Uniswap's (whitelisted) stablecoin liquidity pools.Anyone can mint it by adding these stablecoins to those pools. Example: Mint 2x uSD by adding 1x Stablecoin A and 1x Stablecoin B And by burning uSD, anyone can receive these stablecoins from those pools. Example: Burn 2x uSD and receive 1x Stablecoin A and 1x Stablecoin C Rebalancing Sometimes, collateralization is not enough, and uSD must rebalance in one of two ways. DFO Debit When a stablecoin loses value, the Uniswap Tier pools rebalance to an uneven disparity (\u2260 50/50). If the stablecoin totally fails, the other stablecoins effectively pump in correlation.DFO Debit resolves this issue on-chain by rebalancing uSD, creating debt which the UniFi DFO then pays off by minting UniFi. Let\u2019s look at how this plays out, step by step: 1 - A stablecoin collateralized by uSD loses value or fails altogether. 2 - $UniFi holders vote to remove the tiers containing the failed stablecoin from the whitelist.The uSD supply becomes grater than the supply of the collateralized pooled stablecoins. 3 - To restore 1:1 equilibrium, anyone holding uSD can burn it to receive new UniFi, minted at a 20% discount of the uSD/UniFi Uniswap pool mid-price ratio. The goal of $UniFi holders, which aligns with their self-interest, is to ensure uSD\u2019s security. Thus there is an economic disincentive to whitelist insecure stablecoins. DFO Credit As established, uSD is backed by Uniswap stablecoin pools liquidity. This raises an issue; Uniswap pools earn 0.3% of trading fees. This could destabilize uSD by creating an excess of collateralized stablecoins in the pools.DFO Credit, the second rebalancing function of the UniFi DFO, resolves this by removing that excess from the pools and sending it in the DFO wallet managed by $UniFi holders. This is a long term economic incentive for the UniFi DFO to grow and invest credit in R&D. UniFi has a number of measures in place to ensure uSD's security. uSD pool collateral is locked. Stored in an external smart contract, it can't be touched even by the UniFi DFO, precluding voter fraud by bad actors. In the case of any bug or update, $UniFi holders can vote to pause the uSD smart contract. This prevents minting of new uSD or rebalancing of uSD, but holders will still be able to redeem it for the pooled stable coins, and thus revoke the collateral. Even if the uSD protocol fails, and even if the UniFi DFO votes to update uSD to an undesirable new version, uSD holders will still be able to interact with the old smart contract\u200a-\u200auntil all collateral is revoked\u200a-\u200aas well as the new one. Resilience, Decentralization and Independence uSD is indeed the most resilient and secure stablecoin in the industry. By taking advantage to use Decentralized Finance on the top of Uniswap, a security layer with a decentralized core, it frees holders from dependence on censorship or centralized manipulation by states and stablecoin issuers, and resolves all risks that come with trusting the big stablecoin companies, like MakerDAO, Coinbase, etc. It is backed by a Decentralized Flexible Organization. $UniFi holders on the Ethereum network have 100% control of the code and Credit/Debit of the protocol. Nobody can stop or censor the UniFi-uSD protocol; for the first time, the Ethereum network doesn't have to choose between stability and independence in a stablecoin; it can have both. Allowed Stable Coins The allowed stablecoins to mint and burn uSD with are: DAI 0x6b175474e89094c44da98b954eedeac495271d0f USDC 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 GSDC 0x056fd409e1d7a124bd7017459dfea2f387b6d5cd BUSD 0x4fabb145d64652a948d72533023f6e7a623c7c53 TUSD 0x0000000000085d4780b73119b644ae5ecd22b376 PAX 0x8e870d67f660d95d5be530380d0ec0bd388289e1 APIs and Documentation To build on top of uSD and to interact with the dApp, you can find all of the documentation and APIs here: Documentation Responsible DeFi Limits Because we take a Responsible DeFi Approach, UniFi uSD minting is limited in its early stages: 500,000 uSD mintable for the first month (until block n 10941929) 2,000,000 uSD mintable for the first two months (until block n 11141929) 5,000,000 uSD mintable for the first three months (until block n 11341929) 10,000,000 uSD mintable for the first four months (until block n 11541929) 20,000,000 uSD mintable for the first five months (until block n 11741929) Craft and Initial Liquidity Offerings (ILOs) Craft makes it possible to provide liquidity that is programmable with advanced rules. Using Unicorn magic, pools can balance tokens diversely, and with unprecedented security. Programmable liquidity is an exciting new feature in AMMs (Automated Market Makers). However, if not applied correctly, it can actually be a security hole for bugs, due to math complexities (as we saw with Balancer recently). UniFi Crafting resolves this by offering programmable liquidity, but with the Uniswap protocol as a base layer, taking advantage of its secure and decentralized core. This also helps liquidity providers customize their investments, and empowers new applications on top of Uniswap. How Does It Work? The Uniswap protocol allows for liquidity pools composed of 50:50 asset ratios. This is usually the most secure setup for an AMM, but disincentivizes liquidity provision by incurring impermanent losses. Crafting resolves this, and opens up novel financial use cases for Uniswap pools. It is a fancy new way to build liquidity together, without needing to trust and know each other. Anyone can create a Craft order, customize the liquidity setup and deploy it by contributing initial liquidity. Others can then contribute the rest of the liquidity required to pool the order on Uniswap. Later, after the predetermined block, any of the participants can trigger removal of the liquidity. It is then distributed to all participants based on the predetermined rules. Programmable Liquidity Rules With Crafting, Uniswap liquidity providers can program a liquidity order by customizing the following: Tier: The Uniswap tier to which the liquidity will be added Waiting Length: The max time (in blocks) the order can remain available while the required liquidity is waiting to be filled. Min Block Length: The time (in blocks) for which the liquidity will be locked. If 0, any participant can trigger the removal of liquidity anytime. Liquidity Ratio: The ratio of liquidity, e.g. 10% DAI\u200a-\u200a90% ETH or 0% DAI\u200a-\u200a100 ETH. Once deployed by the creator, others can add the required liquidity. If the creator sets the ratio at 10% DAI\u200a-\u200a90% ETH, the others can add the rest at 90% DAI\u200a-\u200a10% ETH. Liquidity Exit/Discount: An advanced feature for orders that allows for the creation of a different ratio or even a discount for the exit. Let's play out that aforementioned example. Person A creates an order for USDC\u200a-\u200aDAI, with a min block length of 543055 Blocks and a ratio of 10% DAI\u200a-\u200a90% USDC. He adds 100 DAI and 900 USDC, and also decides to set the exit liquidity at 30% DAI and 70% USDC (read on to see exactly how exit liquidity works). B fills part of the remaining required liquidity (at a ratio of 90% DAI and 10% USDC) with 500 DAI and 50 USDC. C fills part of the remaining required liquidity (at a ratio of 90% DAI and 10% USDC) with 100 DAI and 10 USDC. D fills the rest of the required liquidity (at a ratio of 90% DAI and 10% USDC) with 300 DAI and 30 USDC. By adding the final remaining required liquidity, D has triggered Uniswap's Add Liquidity order \u2026 The total Uniswap liquidity pooled by A,B,C and D is 1,000 DAI and 1,000 USDC. After 543055 blocks, the liquidity pool has earned 1,000 USDC and 1,000 DAI in Uniswap trading fees, bringing the total to 2,000 DAI and 2,000 USDC. \u2026 B then triggers the removal action, and based on the fixed predetermined rules, the providers receive the following: A receives 600 DAI and 1,400 USDC (at the Exit Ratio of 30% DAI and 70% USDC). Based on how much they individually contributed, B, C and D receive their respective proportion of 1,400 DAI and 600 USDC (at the Exit Ratio of 70% DAI and 30% USDC). Initial Liquidity Offering (ILO) ILOs are a way for Ethereum-based startups to configure \"Crafting\"\u200a-\u200ai.e, Programmable Liquidity\u200a-\u200arules to secure long term funding by providing Uniswap liquidity. ILOs are helpful for three specific reasons: Securing Initial Liquidity for AMMs With Fixed Inflation/Liquidity Staking Providers can offer liquidity with fixed inflation without dumping on new holders. They also help new investors reduce slippage and become holders with a large amount of capital. Disarming Sniper Bots Sniper Bots track new low liquidity Uniswap pools for sizable capital before liquidity even comes in, making it (until now) impossible for startups to offer liquidity with low collateral. Securing Long Term Locked Investors Investors lock their funds for the long run. How ILOs work: Before distributing their tokens, startups can set crafting orders with fixed pre-values, adding the token and requesting the collateral required to fill the order. Investors provide that collateral, and if the startup chooses, investors get an Exit/Discount to mitigate the high risk. Example The token creator sets a Crafting order with low liquidity, e.g. 1,000,000 of the token and 1 ETH, with a 90%\u200a-\u200a10% ratio, or even 1,000,000 of token and 0 ETH, with a 100%\u200a-\u200a0% ratio (adding a pre-value of the token, if the liquidity pool is not open yet) for one year. Setting the Liquidity Exit/Discount 10%/20%, investors will receive at the end of the order 90%/80%. In this case, investors invest their own Ethereum for a new token that is not already tradable. This entails a high level or risk, and so they are compensated by receiving a more significant portion of the liquidity at the end of the year; in this case, from 50% added to 170% received. ILOs enable new Ethereum fundraising rules that solve liquidity issues in early stages, while also helping legitimate projects set Fixed Inflation. This empowers projects and investors in the long run.UniFi DFO Tax: UniFi DFO Tax The UniFi DFO earns via the Crafting function; 0.1% of the total Uniswap pool tokens in a Craft order is taxed and paid directly when a participant calls the remove function. Releases The release Of Crafting and ILOs is expected for early October 2020. The Bazar Ancient black magic is unleashing the true power of the Unicorn. Programmable Equities and Token Index Funds (and soon NFTs, including ERC1155s, thanks to ethArt V2) can now be swapped on the new Bazar DEX. The UniFi Bazar unleashes the true potential of Decentralized Finance on the top of Uniswap, by enabling Ethereans to trade these more easily than ever before. Listing Index Funds Previously, any ERC20 Uniswap V2 pool token could be traded on Uniswap. But Index Funds\u200a-\u200abacked by multiple ERC20 tokens\u200a-\u200acould not. Until now. On the Bazar, Ethereans can freely swap and track crypto Index Funds. Programmable Equities Programmable equities are a new asset class in crypto. They are the ERC20 voting tokens of Decentralized Flexible Organizations (DFOs). Holders have 100% ownership of the protocol; there is no opportunity for external manipulation. On the Bazar, all programmable equities can be listed and traded on Uniswap. Non-Fungible Tokens (NFTs) ERC1155 NFTs are tokens with metadata, but at the same time have a supply. The reason they haven't been tradable in AMMs before is due to their 'transfer' function. They use the 'SafeTransferFrom' method, instead of the ERC20 methods, 'Transfer' and 'TransferFrom.' Also, they don't have decimals; they're transferred using ID and Amount. ethArt V2 will be released in November, and the Bazar will be able to synthesise ERC1155 tokens with ERC20s (as WETH with ETH) in the background, fundamentally reshaping the NFT market by allowing Ethereans to trade ERC1155 tokens for the first time. Swappable ERC 1155 Release The release of ethArt V2 and swappable NFTs is scheduled for late November. UniFi Token Distribution The total supply of $UniFi is 88,888,888, which is initially distributed and Locked as follows: 36% (32,042,000) are locked in the NERV Wallet [0x25756f9C2cCeaCd787260b001F224159aB9fB97A] This is the DFOhub Operation' DFO wallet, funded by Fair Inflation. 40% (35,900,000) are locked in the UniFI's DFO wallet [0x2578aA454b29C15c8eEF62C972Ee1ff57CD99DEf] . This pays out the liquidity staking rewards. The active reward staking contract is [0xb266252Fd70D253b4330151A96694d35e94b846c] 16% (14,333,333) are locked in the DFOhub wallet (owned by $buidl holders) [0x5D40c724ba3e7Ffa6a91db223368977C522BdACD] UniFi Fair Inflation A sustainable economic model for DFO-based startups to maintain value and fund operations | UniFi version The original whitepaper of the first fair inflation mechanism was for buidl ( (https://github.com/b-u-i-d-l/fair-inflation-v2) ) UniFi's fair inflation will inflate the supply by 2% (1,788,500 $UniFi) over the first year via NERV (The DFOhub Team Operations' DFO) Inflation events will occur once a day (every 6,300 ETH Blocks) across three Uniswap pairs, for a total of 4,900 $UniFi each event: Uniswap V2 $ETH/$UniFi (2695 $UniFi every day)\u200a-\u200a55% Uniswap V2 $USDC/$UniFi (1470 $UniFi every day)\u200a-\u200a30% Uniswap V2 $BUIDL/$UniFi (735 $UniFi every day)\u200a-\u200a15% All functionalities related to this R&D will become available for every DFO as Optional Basic Functionalities, to accelerate the exploration of Programmable Equity R&D. UniFi Liquidity Staking $UniFi liquidity staking is available here: https://dapp.dfohub.com/?staking=0xb266252Fd70D253b4330151A96694d35e94b846c The UniFi Liquidity Staking Mechanism is designed to reward those who lock up Uniswap V2 liquidity for the long term. Staking will inflate the supply over the first year (if every tier is completely filled) by 918,000 $UniFi (1% of the supply). The Five Year tier was filled by the team in an early test, and we won't touch the rewards for three years. When they are unlocked and redeemed, 50% of the UniFi will be sent to the UniFi wallet and 50% to the NERV operations wallet. UniFi Earning System The UniFi DFO earn from: The uSD positive rebalance (the trading fees of Uniswap collateralized stablecoins) The 0.1% in Uniswap Pool Tokens taxed by crafting Programmable Liquidity As an on-chain company, UniFi's value will be backed by these earnings, and by the core of Flexible Organizations, totally ruled in code and assets by tokens, without any chance of external manipulation.","title":"Home"},{"location":"#unifi","text":"","title":"unifi"},{"location":"#table-of-contents","text":"Table of Contents Decentralized Finance on top of Uniswap, doing fantastic things securely Website: https://unifihub.com Unified Stable Dollar Example: Example: Rebalancing DFO Debit DFO Credit UniFi has a number of measures in place to ensure uSD's security. Resilience, Decentralization and Independence Allowed Stable Coins APIs and Documentation Responsible DeFi Limits Craft and Initial Liquidity Offerings (ILOs) How Does It Work? Programmable Liquidity Rules Let's play out that aforementioned example. Initial Liquidity Offering (ILO) Securing Initial Liquidity for AMMs With Fixed Inflation/Liquidity Staking Disarming Sniper Bots Securing Long Term Locked Investors How ILOs work: Example UniFi DFO Tax Releases The Bazar Listing Index Funds Programmable Equities Non-Fungible Tokens (NFTs) Swappable ERC 1155 Release UniFi Token Distribution UniFi Fair Inflation UniFi Liquidity Staking UniFi Earning System","title":"Table of Contents"},{"location":"#decentralized-finance-on-top-of-uniswap-doing-fantastic-things-securely","text":"UniFi is a new Decentralized Flexible Organization (DFO) that researches and develops a responsible Decentralized Finance layer on top of Uniswap. A DFO protocol powered DeFi set of tools built on top of Uniswap","title":"Decentralized Finance on top of Uniswap, doing fantastic things\u00a0securely"},{"location":"#website-httpsunifihubcom","text":"","title":"Website: https://unifihub.com"},{"location":"#unified-stable-dollar","text":"uSD is a stablecoin based on Uniswap Liquidity Pools Minted by the magic rainbow of Uniswap stablecoin pools, and backed by the power of the Unicorn, uSD is the most secure and resilient stablecoin on Ethereum\u200a-\u200aever. The only way it could be destabilized is if the entire stablecoin industry crashed. Independent from any off-chain issuer, it is fortified against every risk inherent to all other stablecoins, and free of the anxiety that pervades the industry. The protocol achieves this unprecedented feat by collateralizing other stablecoins. If any of them lose value or fail, it can simply rebalance itself to leverage the security of the others. And to account for excess due to fees earned by their pools, it can rebalance itself in another way. The only way uSD can be destabilized is if the entire stablecoin industry collapses. uSD is backed by a selection of Uniswap's (whitelisted) stablecoin liquidity pools.Anyone can mint it by adding these stablecoins to those pools.","title":"Unified Stable\u00a0Dollar"},{"location":"#example","text":"Mint 2x uSD by adding 1x Stablecoin A and 1x Stablecoin B And by burning uSD, anyone can receive these stablecoins from those pools.","title":"Example:"},{"location":"#example_1","text":"Burn 2x uSD and receive 1x Stablecoin A and 1x Stablecoin C","title":"Example:"},{"location":"#rebalancing","text":"Sometimes, collateralization is not enough, and uSD must rebalance in one of two ways.","title":"Rebalancing"},{"location":"#dfo-debit","text":"When a stablecoin loses value, the Uniswap Tier pools rebalance to an uneven disparity (\u2260 50/50). If the stablecoin totally fails, the other stablecoins effectively pump in correlation.DFO Debit resolves this issue on-chain by rebalancing uSD, creating debt which the UniFi DFO then pays off by minting UniFi. Let\u2019s look at how this plays out, step by step: 1 - A stablecoin collateralized by uSD loses value or fails altogether. 2 - $UniFi holders vote to remove the tiers containing the failed stablecoin from the whitelist.The uSD supply becomes grater than the supply of the collateralized pooled stablecoins. 3 - To restore 1:1 equilibrium, anyone holding uSD can burn it to receive new UniFi, minted at a 20% discount of the uSD/UniFi Uniswap pool mid-price ratio. The goal of $UniFi holders, which aligns with their self-interest, is to ensure uSD\u2019s security. Thus there is an economic disincentive to whitelist insecure stablecoins.","title":"DFO Debit"},{"location":"#dfo-credit","text":"As established, uSD is backed by Uniswap stablecoin pools liquidity. This raises an issue; Uniswap pools earn 0.3% of trading fees. This could destabilize uSD by creating an excess of collateralized stablecoins in the pools.DFO Credit, the second rebalancing function of the UniFi DFO, resolves this by removing that excess from the pools and sending it in the DFO wallet managed by $UniFi holders. This is a long term economic incentive for the UniFi DFO to grow and invest credit in R&D.","title":"DFO Credit"},{"location":"#unifi-has-a-number-of-measures-in-place-to-ensure-usds-security","text":"uSD pool collateral is locked. Stored in an external smart contract, it can't be touched even by the UniFi DFO, precluding voter fraud by bad actors. In the case of any bug or update, $UniFi holders can vote to pause the uSD smart contract. This prevents minting of new uSD or rebalancing of uSD, but holders will still be able to redeem it for the pooled stable coins, and thus revoke the collateral. Even if the uSD protocol fails, and even if the UniFi DFO votes to update uSD to an undesirable new version, uSD holders will still be able to interact with the old smart contract\u200a-\u200auntil all collateral is revoked\u200a-\u200aas well as the new one.","title":"UniFi has a number of measures in place to ensure uSD's security."},{"location":"#resilience-decentralization-and-independence","text":"uSD is indeed the most resilient and secure stablecoin in the industry. By taking advantage to use Decentralized Finance on the top of Uniswap, a security layer with a decentralized core, it frees holders from dependence on censorship or centralized manipulation by states and stablecoin issuers, and resolves all risks that come with trusting the big stablecoin companies, like MakerDAO, Coinbase, etc. It is backed by a Decentralized Flexible Organization. $UniFi holders on the Ethereum network have 100% control of the code and Credit/Debit of the protocol. Nobody can stop or censor the UniFi-uSD protocol; for the first time, the Ethereum network doesn't have to choose between stability and independence in a stablecoin; it can have both.","title":"Resilience, Decentralization and Independence"},{"location":"#allowed-stable-coins","text":"The allowed stablecoins to mint and burn uSD with are: DAI 0x6b175474e89094c44da98b954eedeac495271d0f USDC 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 GSDC 0x056fd409e1d7a124bd7017459dfea2f387b6d5cd BUSD 0x4fabb145d64652a948d72533023f6e7a623c7c53 TUSD 0x0000000000085d4780b73119b644ae5ecd22b376 PAX 0x8e870d67f660d95d5be530380d0ec0bd388289e1","title":"Allowed Stable\u00a0Coins"},{"location":"#apis-and-documentation","text":"To build on top of uSD and to interact with the dApp, you can find all of the documentation and APIs here: Documentation","title":"APIs and Documentation"},{"location":"#responsible-defi-limits","text":"Because we take a Responsible DeFi Approach, UniFi uSD minting is limited in its early stages: 500,000 uSD mintable for the first month (until block n 10941929) 2,000,000 uSD mintable for the first two months (until block n 11141929) 5,000,000 uSD mintable for the first three months (until block n 11341929) 10,000,000 uSD mintable for the first four months (until block n 11541929) 20,000,000 uSD mintable for the first five months (until block n 11741929)","title":"Responsible DeFi\u00a0Limits"},{"location":"#craft-and-initial-liquidity-offerings-ilos","text":"Craft makes it possible to provide liquidity that is programmable with advanced rules. Using Unicorn magic, pools can balance tokens diversely, and with unprecedented security. Programmable liquidity is an exciting new feature in AMMs (Automated Market Makers). However, if not applied correctly, it can actually be a security hole for bugs, due to math complexities (as we saw with Balancer recently). UniFi Crafting resolves this by offering programmable liquidity, but with the Uniswap protocol as a base layer, taking advantage of its secure and decentralized core. This also helps liquidity providers customize their investments, and empowers new applications on top of Uniswap.","title":"Craft and Initial Liquidity Offerings (ILOs)"},{"location":"#how-does-it-work","text":"The Uniswap protocol allows for liquidity pools composed of 50:50 asset ratios. This is usually the most secure setup for an AMM, but disincentivizes liquidity provision by incurring impermanent losses. Crafting resolves this, and opens up novel financial use cases for Uniswap pools. It is a fancy new way to build liquidity together, without needing to trust and know each other. Anyone can create a Craft order, customize the liquidity setup and deploy it by contributing initial liquidity. Others can then contribute the rest of the liquidity required to pool the order on Uniswap. Later, after the predetermined block, any of the participants can trigger removal of the liquidity. It is then distributed to all participants based on the predetermined rules.","title":"How Does It Work?"},{"location":"#programmable-liquidity-rules","text":"With Crafting, Uniswap liquidity providers can program a liquidity order by customizing the following: Tier: The Uniswap tier to which the liquidity will be added Waiting Length: The max time (in blocks) the order can remain available while the required liquidity is waiting to be filled. Min Block Length: The time (in blocks) for which the liquidity will be locked. If 0, any participant can trigger the removal of liquidity anytime. Liquidity Ratio: The ratio of liquidity, e.g. 10% DAI\u200a-\u200a90% ETH or 0% DAI\u200a-\u200a100 ETH. Once deployed by the creator, others can add the required liquidity. If the creator sets the ratio at 10% DAI\u200a-\u200a90% ETH, the others can add the rest at 90% DAI\u200a-\u200a10% ETH. Liquidity Exit/Discount: An advanced feature for orders that allows for the creation of a different ratio or even a discount for the exit.","title":"Programmable Liquidity Rules"},{"location":"#lets-play-out-that-aforementioned-example","text":"Person A creates an order for USDC\u200a-\u200aDAI, with a min block length of 543055 Blocks and a ratio of 10% DAI\u200a-\u200a90% USDC. He adds 100 DAI and 900 USDC, and also decides to set the exit liquidity at 30% DAI and 70% USDC (read on to see exactly how exit liquidity works). B fills part of the remaining required liquidity (at a ratio of 90% DAI and 10% USDC) with 500 DAI and 50 USDC. C fills part of the remaining required liquidity (at a ratio of 90% DAI and 10% USDC) with 100 DAI and 10 USDC. D fills the rest of the required liquidity (at a ratio of 90% DAI and 10% USDC) with 300 DAI and 30 USDC. By adding the final remaining required liquidity, D has triggered Uniswap's Add Liquidity order \u2026 The total Uniswap liquidity pooled by A,B,C and D is 1,000 DAI and 1,000 USDC. After 543055 blocks, the liquidity pool has earned 1,000 USDC and 1,000 DAI in Uniswap trading fees, bringing the total to 2,000 DAI and 2,000 USDC. \u2026 B then triggers the removal action, and based on the fixed predetermined rules, the providers receive the following: A receives 600 DAI and 1,400 USDC (at the Exit Ratio of 30% DAI and 70% USDC). Based on how much they individually contributed, B, C and D receive their respective proportion of 1,400 DAI and 600 USDC (at the Exit Ratio of 70% DAI and 30% USDC).","title":"Let's play out that aforementioned example."},{"location":"#initial-liquidity-offering-ilo","text":"ILOs are a way for Ethereum-based startups to configure \"Crafting\"\u200a-\u200ai.e, Programmable Liquidity\u200a-\u200arules to secure long term funding by providing Uniswap liquidity. ILOs are helpful for three specific reasons:","title":"Initial Liquidity Offering\u00a0(ILO)"},{"location":"#securing-initial-liquidity-for-amms-with-fixed-inflationliquidity-staking","text":"Providers can offer liquidity with fixed inflation without dumping on new holders. They also help new investors reduce slippage and become holders with a large amount of capital.","title":"Securing Initial Liquidity for AMMs With Fixed Inflation/Liquidity Staking"},{"location":"#disarming-sniper-bots","text":"Sniper Bots track new low liquidity Uniswap pools for sizable capital before liquidity even comes in, making it (until now) impossible for startups to offer liquidity with low collateral.","title":"Disarming Sniper Bots"},{"location":"#securing-long-term-locked-investors","text":"Investors lock their funds for the long run.","title":"Securing Long Term Locked Investors"},{"location":"#how-ilos-work","text":"Before distributing their tokens, startups can set crafting orders with fixed pre-values, adding the token and requesting the collateral required to fill the order. Investors provide that collateral, and if the startup chooses, investors get an Exit/Discount to mitigate the high risk.","title":"How ILOs work:"},{"location":"#example_2","text":"The token creator sets a Crafting order with low liquidity, e.g. 1,000,000 of the token and 1 ETH, with a 90%\u200a-\u200a10% ratio, or even 1,000,000 of token and 0 ETH, with a 100%\u200a-\u200a0% ratio (adding a pre-value of the token, if the liquidity pool is not open yet) for one year. Setting the Liquidity Exit/Discount 10%/20%, investors will receive at the end of the order 90%/80%. In this case, investors invest their own Ethereum for a new token that is not already tradable. This entails a high level or risk, and so they are compensated by receiving a more significant portion of the liquidity at the end of the year; in this case, from 50% added to 170% received. ILOs enable new Ethereum fundraising rules that solve liquidity issues in early stages, while also helping legitimate projects set Fixed Inflation. This empowers projects and investors in the long run.UniFi DFO Tax:","title":"Example"},{"location":"#unifi-dfo-tax","text":"The UniFi DFO earns via the Crafting function; 0.1% of the total Uniswap pool tokens in a Craft order is taxed and paid directly when a participant calls the remove function.","title":"UniFi DFO Tax"},{"location":"#releases","text":"The release Of Crafting and ILOs is expected for early October 2020.","title":"Releases"},{"location":"#the-bazar","text":"Ancient black magic is unleashing the true power of the Unicorn. Programmable Equities and Token Index Funds (and soon NFTs, including ERC1155s, thanks to ethArt V2) can now be swapped on the new Bazar DEX. The UniFi Bazar unleashes the true potential of Decentralized Finance on the top of Uniswap, by enabling Ethereans to trade these more easily than ever before.","title":"The\u00a0Bazar"},{"location":"#listing","text":"","title":"Listing"},{"location":"#index-funds","text":"Previously, any ERC20 Uniswap V2 pool token could be traded on Uniswap. But Index Funds\u200a-\u200abacked by multiple ERC20 tokens\u200a-\u200acould not. Until now. On the Bazar, Ethereans can freely swap and track crypto Index Funds.","title":"Index Funds"},{"location":"#programmable-equities","text":"Programmable equities are a new asset class in crypto. They are the ERC20 voting tokens of Decentralized Flexible Organizations (DFOs). Holders have 100% ownership of the protocol; there is no opportunity for external manipulation. On the Bazar, all programmable equities can be listed and traded on Uniswap.","title":"Programmable Equities"},{"location":"#non-fungible-tokens-nfts","text":"ERC1155 NFTs are tokens with metadata, but at the same time have a supply. The reason they haven't been tradable in AMMs before is due to their 'transfer' function. They use the 'SafeTransferFrom' method, instead of the ERC20 methods, 'Transfer' and 'TransferFrom.' Also, they don't have decimals; they're transferred using ID and Amount. ethArt V2 will be released in November, and the Bazar will be able to synthesise ERC1155 tokens with ERC20s (as WETH with ETH) in the background, fundamentally reshaping the NFT market by allowing Ethereans to trade ERC1155 tokens for the first time.","title":"Non-Fungible Tokens (NFTs)"},{"location":"#swappable-erc-1155-release","text":"The release of ethArt V2 and swappable NFTs is scheduled for late November.","title":"Swappable ERC 1155 Release"},{"location":"#unifi-token-distribution","text":"The total supply of $UniFi is 88,888,888, which is initially distributed and Locked as follows: 36% (32,042,000) are locked in the NERV Wallet [0x25756f9C2cCeaCd787260b001F224159aB9fB97A] This is the DFOhub Operation' DFO wallet, funded by Fair Inflation. 40% (35,900,000) are locked in the UniFI's DFO wallet [0x2578aA454b29C15c8eEF62C972Ee1ff57CD99DEf] . This pays out the liquidity staking rewards. The active reward staking contract is [0xb266252Fd70D253b4330151A96694d35e94b846c] 16% (14,333,333) are locked in the DFOhub wallet (owned by $buidl holders) [0x5D40c724ba3e7Ffa6a91db223368977C522BdACD]","title":"UniFi Token Distribution"},{"location":"#unifi-fair-inflation","text":"A sustainable economic model for DFO-based startups to maintain value and fund operations | UniFi version The original whitepaper of the first fair inflation mechanism was for buidl ( (https://github.com/b-u-i-d-l/fair-inflation-v2) ) UniFi's fair inflation will inflate the supply by 2% (1,788,500 $UniFi) over the first year via NERV (The DFOhub Team Operations' DFO) Inflation events will occur once a day (every 6,300 ETH Blocks) across three Uniswap pairs, for a total of 4,900 $UniFi each event: Uniswap V2 $ETH/$UniFi (2695 $UniFi every day)\u200a-\u200a55% Uniswap V2 $USDC/$UniFi (1470 $UniFi every day)\u200a-\u200a30% Uniswap V2 $BUIDL/$UniFi (735 $UniFi every day)\u200a-\u200a15% All functionalities related to this R&D will become available for every DFO as Optional Basic Functionalities, to accelerate the exploration of Programmable Equity R&D.","title":"UniFi Fair Inflation"},{"location":"#unifi-liquidity-staking","text":"$UniFi liquidity staking is available here: https://dapp.dfohub.com/?staking=0xb266252Fd70D253b4330151A96694d35e94b846c The UniFi Liquidity Staking Mechanism is designed to reward those who lock up Uniswap V2 liquidity for the long term. Staking will inflate the supply over the first year (if every tier is completely filled) by 918,000 $UniFi (1% of the supply). The Five Year tier was filled by the team in an early test, and we won't touch the rewards for three years. When they are unlocked and redeemed, 50% of the UniFi will be sent to the UniFi wallet and 50% to the NERV operations wallet.","title":"UniFi Liquidity Staking"},{"location":"#unifi-earning-system","text":"The UniFi DFO earn from: The uSD positive rebalance (the trading fees of Uniswap collateralized stablecoins) The 0.1% in Uniswap Pool Tokens taxed by crafting Programmable Liquidity As an on-chain company, UniFi's value will be backed by these earnings, and by the core of Flexible Organizations, totally ruled in code and assets by tokens, without any chance of external manipulation.","title":"UniFi Earning\u00a0System"},{"location":"CONTRIBUTING/","text":"Contributing guidelines Table of Contents Table of Contents Coding Style Solidity JavaScript Python Documentation mkdocs Coding Style Solidity Solidity portions of the codebase adhere follow the official Solidity Styleguide JavaScript Python Python portions of the codebase follow standard PEP8 best practices. Python code must be formatted using the Black formatter using the provided settings. Documentation New addition to the codebase must be fully documented. JavaScript portions of the code should be annotated using JSDoc style docstrings. Solidity portions of the code should be fully annotated using NatSpec and [Solidity Domain for Sphinx]. Documentation is generated using solidity-docgen and rendered via mkdocs . solidity-docgen parses NatSpec and outputs .md files inside docs/md-build according to an Handlebars template located at docs/solidity-docgen-templates/contract.hbs . NOTE: Each .sol file should contain only one Interface or Contract . To build the documentation: yarn docs:build To serve the documentation yarn docs:serve mkdocs To install mkdocs Python must be installed in the system. pip install docs/requirements.in NOTE: Working inside a virtual environment is highly recommended!","title":"Contributing"},{"location":"CONTRIBUTING/#contributing-guidelines","text":"","title":"Contributing guidelines"},{"location":"CONTRIBUTING/#table-of-contents","text":"Table of Contents Coding Style Solidity JavaScript Python Documentation mkdocs","title":"Table of Contents"},{"location":"CONTRIBUTING/#coding-style","text":"","title":"Coding Style"},{"location":"CONTRIBUTING/#solidity","text":"Solidity portions of the codebase adhere follow the official Solidity Styleguide","title":"Solidity"},{"location":"CONTRIBUTING/#javascript","text":"","title":"JavaScript"},{"location":"CONTRIBUTING/#python","text":"Python portions of the codebase follow standard PEP8 best practices. Python code must be formatted using the Black formatter using the provided settings.","title":"Python"},{"location":"CONTRIBUTING/#documentation","text":"New addition to the codebase must be fully documented. JavaScript portions of the code should be annotated using JSDoc style docstrings. Solidity portions of the code should be fully annotated using NatSpec and [Solidity Domain for Sphinx]. Documentation is generated using solidity-docgen and rendered via mkdocs . solidity-docgen parses NatSpec and outputs .md files inside docs/md-build according to an Handlebars template located at docs/solidity-docgen-templates/contract.hbs . NOTE: Each .sol file should contain only one Interface or Contract . To build the documentation: yarn docs:build To serve the documentation yarn docs:serve","title":"Documentation"},{"location":"CONTRIBUTING/#mkdocs","text":"To install mkdocs Python must be installed in the system. pip install docs/requirements.in NOTE: Working inside a virtual environment is highly recommended!","title":"mkdocs"},{"location":"stableCoin/microservices/IERC20/","text":"L1E L1E - [ mint(uint256 amount) ](L1E - [ balanceOf(address account) ](L1E L1E mint(uint256 amount) L1E balanceOf(address account) \u2192 uint256","title":"IERC20"},{"location":"stableCoin/microservices/IMVDFunctionalitiesManager/","text":"L1E L1E - [ isAuthorizedFunctionality(address functionality) ](L1E L1E isAuthorizedFunctionality(address functionality) \u2192 bool","title":"IMVDFunctionalitiesManager"},{"location":"stableCoin/microservices/IMVDProxy/","text":"L1E L1E - [ getToken() ](L1E - [ getStateHolderAddress() ](L1E - [ getMVDFunctionalitiesManagerAddress() ](L1E - [ transfer(address receiver, uint256 value, address token) ](L1E - [ flushToWallet(address tokenAddress, bool is721, uint256 tokenId) ](L1E L1E getToken() \u2192 address L1E getStateHolderAddress() \u2192 address L1E getMVDFunctionalitiesManagerAddress() \u2192 address L1E transfer(address receiver, uint256 value, address token) L1E flushToWallet(address tokenAddress, bool is721, uint256 tokenId)","title":"IMVDProxy"},{"location":"stableCoin/microservices/IStateHolder/","text":"L1E L1E - [ clear(string varName) ](L1E - [ setBool(string varName, bool val) ](L1E - [ getBool(string varName) ](L1E L1E clear(string varName) \u2192 string oldDataType, bytes oldVal L1E setBool(string varName, bool val) \u2192 bool L1E getBool(string varName) \u2192 bool","title":"IStateHolder"},{"location":"stableCoin/microservices/MintNewVotingTokensForStableCoinFunctionality/","text":"L1E This contract adds unifi minting capabilies to uSD L1E - [ onStart(address, address) ](L1E - [ onStop(address) ](L1E - [ mintNewVotingTokensForStableCoin(address sender, uint256, uint256 amountToMint, address receiver) ](L1E L1E onStart(address, address) L1E onStop(address) L1E mintNewVotingTokensForStableCoin(address sender, uint256, uint256 amountToMint, address receiver)","title":"MintNewVotingTokensForStableCoinFunctionality"},{"location":"stableCoin/standalone/Address/","text":"L1E Collection of functions related to the address type L1E","title":"Address"},{"location":"stableCoin/standalone/Context/","text":"L1E Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with GSN meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts. L1E","title":"Context"},{"location":"stableCoin/standalone/ERC20/","text":"L1E Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning false on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}. L1E - [ name() ](L1E - [ symbol() ](L1E - [ decimals() ](L1E - [ totalSupply() ](L1E - [ balanceOf(address account) ](L1E - [ transfer(address recipient, uint256 amount) ](L1E - [ allowance(address owner, address spender) ](L1E - [ approve(address spender, uint256 amount) ](L1E - [ transferFrom(address sender, address recipient, uint256 amount) ](L1E - [ increaseAllowance(address spender, uint256 addedValue) ](L1E - [ decreaseAllowance(address spender, uint256 subtractedValue) ](L1E L1E name() \u2192 string L1E Returns the name of the token. L1E symbol() \u2192 string L1E Returns the symbol of the token, usually a shorter version of the name. L1E decimals() \u2192 uint8 L1E Returns the number of decimals used to get its user representation. For example, if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5,05 ( 505 / 10 ** 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless { setupDecimals} is called. NOTE: This information is only used for _display purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}. L1E totalSupply() \u2192 uint256 L1E See {IERC20-totalSupply}. L1E balanceOf(address account) \u2192 uint256 L1E See {IERC20-balanceOf}. L1E transfer(address recipient, uint256 amount) \u2192 bool L1E See {IERC20-transfer}. Requirements: - recipient cannot be the zero address. - the caller must have a balance of at least amount . L1E allowance(address owner, address spender) \u2192 uint256 L1E See {IERC20-allowance}. L1E approve(address spender, uint256 amount) \u2192 bool L1E See {IERC20-approve}. Requirements: - spender cannot be the zero address. L1E transferFrom(address sender, address recipient, uint256 amount) \u2192 bool L1E See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - sender and recipient cannot be the zero address. - sender must have a balance of at least amount . - the caller must have allowance for sender 's tokens of at least amount . L1E increaseAllowance(address spender, uint256 addedValue) \u2192 bool L1E Atomically increases the allowance granted to spender by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - spender cannot be the zero address. L1E decreaseAllowance(address spender, uint256 subtractedValue) \u2192 bool L1E Atomically decreases the allowance granted to spender by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - spender cannot be the zero address. - spender must have allowance for the caller of at least subtractedValue .","title":"ERC20"},{"location":"stableCoin/standalone/IDoubleProxy/","text":"L1E L1E - [ proxy() ](L1E L1E proxy() \u2192 address","title":"IDoubleProxy"},{"location":"stableCoin/standalone/IERC20/","text":"L1E Interface of the ERC20 standard as defined in the EIP. L1E - [ totalSupply() ](L1E - [ balanceOf(address account) ](L1E - [ transfer(address recipient, uint256 amount) ](L1E - [ allowance(address owner, address spender) ](L1E - [ approve(address spender, uint256 amount) ](L1E - [ transferFrom(address sender, address recipient, uint256 amount) ](L1E L1E - [ Transfer(address from, address to, uint256 value) ](L1E - [ Approval(address owner, address spender, uint256 value) ](L1E L1E totalSupply() \u2192 uint256 L1E Returns the amount of tokens in existence. L1E balanceOf(address account) \u2192 uint256 L1E Returns the amount of tokens owned by account . L1E transfer(address recipient, uint256 amount) \u2192 bool L1E Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. L1E allowance(address owner, address spender) \u2192 uint256 L1E Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called. L1E approve(address spender, uint256 amount) \u2192 bool L1E Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20L1E Emits an {Approval} event. L1E transferFrom(address sender, address recipient, uint256 amount) \u2192 bool L1E Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. L1E Transfer(address from, address to, uint256 value) L1E Emitted when value tokens are moved from one account ( from ) to another ( to ). Note that value may be zero. L1E Approval(address owner, address spender, uint256 value) L1E Emitted when the allowance of a spender for an owner is set by a call to {approve}. value is the new allowance.","title":"IERC20"},{"location":"stableCoin/standalone/IMVDFunctionalitiesManager/","text":"L1E L1E - [ isAuthorizedFunctionality(address functionality) ](L1E L1E isAuthorizedFunctionality(address functionality) \u2192 bool","title":"IMVDFunctionalitiesManager"},{"location":"stableCoin/standalone/IMVDProxy/","text":"L1E L1E - [ getToken() ](L1E - [ getMVDFunctionalitiesManagerAddress() ](L1E - [ getMVDWalletAddress() ](L1E - [ getStateHolderAddress() ](L1E - [ submit(string codeName, bytes data) ](L1E L1E getToken() \u2192 address L1E getMVDFunctionalitiesManagerAddress() \u2192 address L1E getMVDWalletAddress() \u2192 address L1E getStateHolderAddress() \u2192 address L1E submit(string codeName, bytes data) \u2192 bytes returnData","title":"IMVDProxy"},{"location":"stableCoin/standalone/IStableCoin/","text":"L1E Define the interface for the $usD The core idea behind Unified Stable Coin is to implement a stable coin collateralized by pools of whitelisted stable coins on UniSwap. By hedging across several pools and implementing simple yet effective rebalancing schemes, $uSD is able reduce an holder exposure to a stable-coin failure. L1E - [ init(string name, string symbol, address doubleProxy, address[] allowedPairs, uint256[] rebalanceRewardMultiplier, uint256[] timeWindows, uint256[] mintables) ](L1E - [ allowedPairs() ](L1E - [ availableToMint() ](L1E - [ differences() ](L1E - [ doubleProxy() ](L1E - [ rebalanceRewardMultiplier() ](L1E - [ tierData() ](L1E - [ setAllowedPairs(address[] newAllowedPairs) ](L1E - [ setDoubleProxy(address newDoubleProxy) ](L1E - [ calculateRebalanceByDebtReward(uint256 burnt) ](L1E - [ fromTokenToStable(address tokenAddress, uint256 amount) ](L1E - [ mint(uint256 pairIndex, uint256 amountA, uint256 amountB, uint256 amountAMin, uint256 amountBMin) ](L1E - [ burn(uint256 pairIndex, uint256 pairAmount, uint256 amountAMin, uint256 amountBMin) ](L1E - [ rebalanceByCredit(uint256 pairIndex, uint256 pairAmount, uint256 amountA, uint256 amountB) ](L1E - [ rebalanceByDebt(uint256 amount) ](L1E L1E init(string name, string symbol, address doubleProxy, address[] allowedPairs, uint256[] rebalanceRewardMultiplier, uint256[] timeWindows, uint256[] mintables) L1E Constructor signature L1E - name : name of the StableCoin ERC20 token symbol : ticker for the StableCoin ERC20 token doubleProxy : address for the DoubleProxy allowedPairs : array of Uniswap Pairs to be set as whitelisted source tokens rebalanceRewardMultiplier : multiplier used to compute how many unifi tokens to mint during $uSD rebalance timeWindows : time windows inside which some time-delimited operations can be performed mintables : max amount of mintables inside a timeWindow L1E allowedPairs() \u2192 address[] L1E - Array of allowed Uniswap pairs L1E availableToMint() \u2192 uint256 mintable L1E - mintable The amount of available mintable token L1E differences() \u2192 uint256, uint256 L1E doubleProxy() \u2192 address L1E - The address for the doubleProxy smart contract L1E rebalanceRewardMultiplier() \u2192 uint256[] L1E - The multiplier used to compute the rebalancing rewards L1E tierData() \u2192 uint256[], uint256[] L1E - All tiers of data of the carried context L1E setAllowedPairs(address[] newAllowedPairs) L1E - newAllowedPairs : list of Uniswap pairs to be whitelisted L1E setDoubleProxy(address newDoubleProxy) L1E - newDoubleProxy : new DoubleProxy to set L1E calculateRebalanceByDebtReward(uint256 burnt) \u2192 uint256 reward L1E Compute the reward of the rebalanceByDebt() operation. L1E - burnt : amount of of $uSD burnt L1E fromTokenToStable(address tokenAddress, uint256 amount) \u2192 uint256 L1E Convert from one of the allowed whitelisted tokens to $uSD L1E - tokenAddress : Address of the token to convert amount : Amount of Unifi token to be converted L1E - Amount of $uSD tokens L1E mint(uint256 pairIndex, uint256 amountA, uint256 amountB, uint256 amountAMin, uint256 amountBMin) \u2192 uint256 L1E Mint the $uSD token L1E - pairIndex : Index of the pair inside the allowedPairs array amountA : The amount of tokenA to add as liquidity if the B/A price is <= amountBDesired/amountADesired (A depreciates) amountB : The amount of tokenB to add as liquidity if the A/B price is <= amountADesired/amountBDesired (B depreciates) amountAMin : Bounds the extent to which the B/A price can go up before the transaction reverts. Must be <= amountADesired amountBMin : Bounds the extent to which the A/B price can go up before the transaction reverts. Must be <= amountBDesired L1E - Amount of freshly minted $uSD token L1E burn(uint256 pairIndex, uint256 pairAmount, uint256 amountAMin, uint256 amountBMin) \u2192 uint256 amountA, uint256 amountB L1E Mint the $uSD token L1E - pairIndex : Index of the pair inside the allowedPairs array amountAMin : The minimum amount of tokenA that must be received for the transaction not to revert amountBMin : The minimum amount of tokenB that must be received for the transaction not to revert L1E - amountA The amount of tokenA received amountB The amount of tokenB received L1E rebalanceByCredit(uint256 pairIndex, uint256 pairAmount, uint256 amountA, uint256 amountB) \u2192 uint256 redeemed L1E Rebalance by Credit is triggered when the total amount of source tokens' is greater than $uSD circulating supply. Rebalancing is done by withdrawing the excess from the pool. L1E rebalanceByDebt(uint256 amount) \u2192 uint256 L1E Rebalance by Debt is triggered when the total amount of source tokens' is lesser than $uSD circulating supply. Rebalancing is done by minting new equity ($unifi) at premium in exchange for burning $uSD.","title":"IStableCoin"},{"location":"stableCoin/standalone/IStateHolder/","text":"L1E L1E - [ getBool(string varName) ](L1E - [ getUint256(string varName) ](L1E L1E getBool(string varName) \u2192 bool L1E getUint256(string varName) \u2192 uint256","title":"IStateHolder"},{"location":"stableCoin/standalone/IUniswapV2Pair/","text":"L1E L1E - [ decimals() ](L1E - [ totalSupply() ](L1E - [ token0() ](L1E - [ token1() ](L1E - [ balanceOf(address account) ](L1E - [ getReserves() ](L1E L1E decimals() \u2192 uint8 L1E totalSupply() \u2192 uint256 L1E token0() \u2192 address L1E token1() \u2192 address L1E balanceOf(address account) \u2192 uint256 L1E getReserves() \u2192 uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast","title":"IUniswapV2Pair"},{"location":"stableCoin/standalone/IUniswapV2Router/","text":"L1E Route liquidity back and forth an Uniswap Liquidity Pool. For more information see: https://uniswap.org/docs/v2/smart-contracts/router02/ L1E - [ getAmountsOut(uint256 amountIn, address[] path) ](L1E - [ removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) ](L1E - [ addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) ](L1E L1E getAmountsOut(uint256 amountIn, address[] path) \u2192 uint256[] amounts L1E removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) \u2192 uint256 amountA, uint256 amountB L1E Removes liquidity from an ERC-20\u21c4ERC-20 pool https://uniswap.org/docs/v2/smart-contracts/router02/L1E ===== L1E - tokenA : A pool token tokenB : A pool token liquidity : The amount of liquidity tokens to remove amountAMin : The minimum amount of tokenA that must be received for the transaction not to revert amountBMin : The minimum amount of tokenB that must be received for the transaction not to revert to : Recipient of the underlying assets - deadline : Unix timestamp after which the transaction will revert L1E - amountA The amount of tokenA received amountB The amount of tokenB received L1E addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) \u2192 uint256 amountA, uint256 amountB, uint256 liquidity L1E Add Liquidity to an ERC-20\u21c4ERC-20 pool To cover all possible scenarios, msg.sender should have already given the router an allowance of at least amountADesired/amountBDesired on tokenA/tokenB. Always adds assets at the ideal ratio, according to the price when the transaction is executed. If a pool for the passed tokens does not exists, one is created automatically, and exactly amountADesired/amountBDesired tokens are added. https://uniswap.org/docs/v2/smart-contracts/router02/L1E ===== L1E - tokenA : A pool token tokenB : A pool token liquidity : The amount of liquidity tokens to remove amountADesired : The amount of tokenA to add as liquidity if the B/A price is <= amountBDesired/amountADesired (A depreciates). amountBDesired : The amount of tokenB to add as liquidity if the A/B price is <= amountADesired/amountBDesired (B depreciates). amountAMin : Bounds the extent to which the B/A price can go up before the transaction reverts. Must be <= amountADesired. amountBMin : Bounds the extent to which the A/B price can go up before the transaction reverts. Must be <= amountBDesired. to : Recipient of the underlying assets - deadline : Unix timestamp after which the transaction will revert L1E - amountA The amount of tokenA sent to the pool amountB The amount of tokenB sent to the pool liquidity The amount of liquidity tokens minted","title":"IUniswapV2Router"},{"location":"stableCoin/standalone/IUniswapV2Router/#-deadline-unix-timestamp-after-which-the-transaction-will-revert","text":"L1E - amountA The amount of tokenA received amountB The amount of tokenB received L1E addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) \u2192 uint256 amountA, uint256 amountB, uint256 liquidity L1E Add Liquidity to an ERC-20\u21c4ERC-20 pool To cover all possible scenarios, msg.sender should have already given the router an allowance of at least amountADesired/amountBDesired on tokenA/tokenB. Always adds assets at the ideal ratio, according to the price when the transaction is executed. If a pool for the passed tokens does not exists, one is created automatically, and exactly amountADesired/amountBDesired tokens are added. https://uniswap.org/docs/v2/smart-contracts/router02/L1E ===== L1E - tokenA : A pool token tokenB : A pool token liquidity : The amount of liquidity tokens to remove amountADesired : The amount of tokenA to add as liquidity if the B/A price is <= amountBDesired/amountADesired (A depreciates). amountBDesired : The amount of tokenB to add as liquidity if the A/B price is <= amountADesired/amountBDesired (B depreciates). amountAMin : Bounds the extent to which the B/A price can go up before the transaction reverts. Must be <= amountADesired. amountBMin : Bounds the extent to which the A/B price can go up before the transaction reverts. Must be <= amountBDesired. to : Recipient of the underlying assets","title":"- deadline: Unix timestamp after which the transaction will revert"},{"location":"stableCoin/standalone/IUniswapV2Router/#-deadline-unix-timestamp-after-which-the-transaction-will-revert_1","text":"L1E - amountA The amount of tokenA sent to the pool amountB The amount of tokenB sent to the pool liquidity The amount of liquidity tokens minted","title":"- deadline: Unix timestamp after which the transaction will revert"},{"location":"stableCoin/standalone/SafeMath/","text":"L1E Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. SafeMath restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always. L1E","title":"SafeMath"},{"location":"stableCoin/standalone/StableCoin/","text":"L1E Contract for the $uSD Stable Coin. It's an ERC20 token extended with the IStableCoin interface and DFO protocol magic. L1E - [ constructor(string name, string symbol, address doubleProxy, address[] allowedPairs, uint256[] rebalanceRewardMultiplier, uint256[] timeWindows, uint256[] mintables) ](L1E - [ init(string name, string symbol, address doubleProxy, address[] allowedPairs, uint256[] rebalanceRewardMultiplier, uint256[] timeWindows, uint256[] mintables) ](L1E - [ allowedPairs() ](L1E - [ availableToMint() ](L1E - [ differences() ](L1E - [ doubleProxy() ](L1E - [ rebalanceRewardMultiplier() ](L1E - [ tierData() ](L1E - [ setAllowedPairs(address[] newAllowedPairs) ](L1E - [ setDoubleProxy(address newDoubleProxy) ](L1E - [ calculateRebalanceByDebtReward(uint256 burnt) ](L1E - [ fromTokenToStable(address tokenAddress, uint256 amount) ](L1E - [ mint(uint256 pairIndex, uint256 amountA, uint256 amountB, uint256 amountAMin, uint256 amountBMin) ](L1E - [ burn(uint256 pairIndex, uint256 pairAmount, uint256 amountAMin, uint256 amountBMin) ](L1E - [ rebalanceByCredit(uint256 pairIndex, uint256 pairAmount, uint256 amountA, uint256 amountB) ](L1E - [ rebalanceByDebt(uint256 amount) ](L1E L1E constructor(string name, string symbol, address doubleProxy, address[] allowedPairs, uint256[] rebalanceRewardMultiplier, uint256[] timeWindows, uint256[] mintables) L1E Contract constructor. See StableCoin.init() docs. L1E init(string name, string symbol, address doubleProxy, address[] allowedPairs, uint256[] rebalanceRewardMultiplier, uint256[] timeWindows, uint256[] mintables) L1E allowedPairs() \u2192 address[] L1E availableToMint() \u2192 uint256 L1E differences() \u2192 uint256 credit, uint256 debt L1E doubleProxy() \u2192 address L1E rebalanceRewardMultiplier() \u2192 uint256[] L1E tierData() \u2192 uint256[], uint256[] L1E setAllowedPairs(address[] newAllowedPairs) L1E setDoubleProxy(address newDoubleProxy) L1E calculateRebalanceByDebtReward(uint256 burnt) \u2192 uint256 reward L1E fromTokenToStable(address tokenAddress, uint256 amount) \u2192 uint256 L1E mint(uint256 pairIndex, uint256 amountA, uint256 amountB, uint256 amountAMin, uint256 amountBMin) \u2192 uint256 minted L1E Minting first check tha DFO auth protocol are respected, secondly it sends the tokens to a Uniswap Pool (_createPoolToken) L1E burn(uint256 pairIndex, uint256 pairAmount, uint256 amountAMin, uint256 amountBMin) \u2192 uint256 removedA, uint256 removedB L1E rebalanceByCredit(uint256 pairIndex, uint256 pairAmount, uint256 amountA, uint256 amountB) \u2192 uint256 redeemed L1E Rebalance by Credit is triggered when the total amount of source tokens is greater than uSD circulating supply. Rebalancing is done by withdrawing the excess from the pool. L1E rebalanceByDebt(uint256 amount) \u2192 uint256 reward","title":"StableCoin"}]}